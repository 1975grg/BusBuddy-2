import { useState } from "react";
import {
  DndContext,
  closestCenter,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors,
  DragEndEvent,
} from "@dnd-kit/core";
import {
  arrayMove,
  SortableContext,
  sortableKeyboardCoordinates,
  verticalListSortingStrategy,
} from "@dnd-kit/sortable";
import {
  useSortable,
} from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { FormField, FormItem, FormLabel, FormControl, FormMessage } from "@/components/ui/form";
import { AddressAutocomplete } from "./AddressAutocomplete";
import { GripVertical, X, MapPin } from "lucide-react";
import { Control, UseFormSetValue, UseFormWatch } from "react-hook-form";

interface RouteStop {
  id: string;
  name: string;
  address?: string;
  placeId?: string;
  latitude?: number;
  longitude?: number;
  approachingRadiusM?: number;
  arrivalRadiusM?: number;
}

interface RouteStopItemProps {
  stop: RouteStop;
  index: number;
  control: Control<any>;
  onRemove: (id: string) => void;
  setValue: UseFormSetValue<any>;
  watch: UseFormWatch<any>;
}

function SortableRouteStopItem({ stop, index, control, onRemove, setValue, watch }: RouteStopItemProps) {
  const [nameAutoGenerated, setNameAutoGenerated] = useState(false);
  
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging,
  } = useSortable({ id: stop.id });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0.8 : 1,
  };

  const handleAddressSelect = (addressData: any) => {
    if (addressData) {
      setValue(`stops.${index}.address`, addressData.address);
      setValue(`stops.${index}.placeId`, addressData.placeId);
      setValue(`stops.${index}.latitude`, addressData.latitude);
      setValue(`stops.${index}.longitude`, addressData.longitude);
    } else {
      setValue(`stops.${index}.address`, undefined);
      setValue(`stops.${index}.placeId`, undefined);
      setValue(`stops.${index}.latitude`, undefined);
      setValue(`stops.${index}.longitude`, undefined);
    }
  };

  const handleNameGenerated = (generatedName: string) => {
    const currentName = watch(`stops.${index}.name`);
    // Only auto-fill if name is empty or was previously auto-generated
    if (!currentName || nameAutoGenerated) {
      setValue(`stops.${index}.name`, generatedName);
      setNameAutoGenerated(true);
    }
  };

  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setValue(`stops.${index}.name`, e.target.value);
    setNameAutoGenerated(false); // User manually edited the name
  };

  const currentAddress = watch(`stops.${index}.address`);
  const currentName = watch(`stops.${index}.name`);

  return (
    <div
      ref={setNodeRef}
      style={style}
      className={`flex items-center gap-3 p-3 border rounded-lg bg-background ${isDragging ? 'shadow-md' : ''}`}
      data-testid={`route-stop-${index}`}
    >
      {/* Drag Handle */}
      <div
        {...attributes}
        {...listeners}
        className="cursor-grab active:cursor-grabbing hover:bg-muted rounded p-1"
        data-testid={`drag-handle-${index}`}
      >
        <GripVertical className="w-4 h-4 text-muted-foreground" />
      </div>

      {/* Stop Number */}
      <Badge variant="outline" className="min-w-8 h-6 flex items-center justify-center">
        {index + 1}
      </Badge>

      {/* Stop Fields */}
      <div className="flex-1 grid grid-cols-1 md:grid-cols-2 gap-3">
        {/* Address Autocomplete */}
        <div>
          <FormField
            control={control}
            name={`stops.${index}.address`}
            render={() => (
              <FormItem>
                <FormLabel className="text-xs text-muted-foreground">Address</FormLabel>
                <FormControl>
                  <AddressAutocomplete
                    value={currentAddress || ""}
                    onChange={handleAddressSelect}
                    onNameGenerated={handleNameGenerated}
                    placeholder="Search address..."
                    data-testid={`input-address-${index}`}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>

        {/* Stop Name */}
        <div>
          <FormField
            control={control}
            name={`stops.${index}.name`}
            render={({ field }) => (
              <FormItem>
                <FormLabel className="text-xs text-muted-foreground">Stop Name</FormLabel>
                <FormControl>
                  <div className="relative">
                    <Input
                      {...field}
                      value={currentName || ""}
                      onChange={handleNameChange}
                      placeholder="e.g., Main Entrance"
                      data-testid={`input-name-${index}`}
                    />
                    {currentAddress && (
                      <MapPin className="absolute right-2 top-1/2 -translate-y-1/2 w-3 h-3 text-green-600" />
                    )}
                  </div>
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
      </div>

      {/* Remove Button */}
      <Button
        type="button"
        variant="ghost"
        size="icon"
        onClick={() => onRemove(stop.id)}
        className="hover:bg-destructive/10 hover:text-destructive"
        data-testid={`button-remove-stop-${index}`}
      >
        <X className="w-4 h-4" />
      </Button>
    </div>
  );
}

interface SortableRouteStopsProps {
  stops: RouteStop[];
  control: Control<any>;
  setValue: UseFormSetValue<any>;
  watch: UseFormWatch<any>;
  onStopsChange: (stops: RouteStop[]) => void;
  onAddStop: () => void;
  onRemoveStop: (id: string) => void;
}

export function SortableRouteStops({
  stops,
  control,
  setValue,
  watch,
  onStopsChange,
  onAddStop,
  onRemoveStop,
}: SortableRouteStopsProps) {
  const sensors = useSensors(
    useSensor(PointerSensor),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  );

  const handleDragEnd = (event: DragEndEvent) => {
    const { active, over } = event;

    if (active.id !== over?.id) {
      const oldIndex = stops.findIndex((stop) => stop.id === active.id);
      const newIndex = stops.findIndex((stop) => stop.id === over?.id);

      const newStops = arrayMove(stops, oldIndex, newIndex);
      onStopsChange(newStops);
    }
  };

  return (
    <DndContext sensors={sensors} collisionDetection={closestCenter} onDragEnd={handleDragEnd}>
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-medium">Route Stops</h3>
          <Button
            type="button"
            variant="outline"
            size="sm"
            onClick={onAddStop}
            data-testid="button-add-stop"
          >
            <MapPin className="w-4 h-4 mr-2" />
            Add Stop
          </Button>
        </div>

        <SortableContext items={stops.map((stop) => stop.id)} strategy={verticalListSortingStrategy}>
          <div className="space-y-3">
            {stops.map((stop, index) => (
              <SortableRouteStopItem
                key={stop.id}
                stop={stop}
                index={index}
                control={control}
                onRemove={onRemoveStop}
                setValue={setValue}
                watch={watch}
              />
            ))}
          </div>
        </SortableContext>

        {stops.length === 0 && (
          <div className="text-center py-8 text-muted-foreground">
            <MapPin className="w-8 h-8 mx-auto mb-2" />
            <p>No stops added yet</p>
            <p className="text-sm">Click "Add Stop" to get started</p>
          </div>
        )}
      </div>
    </DndContext>
  );
}